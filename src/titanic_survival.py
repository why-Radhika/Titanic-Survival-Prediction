# -*- coding: utf-8 -*-
"""Titanic Survival.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b8lKvElfjIDj_JGIMASYKLQw5RPKZluj
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Processing"""

#load the data from csv file to a Pandas DataFrame
titanic_data = pd.read_csv('/content/tested.csv')

#printing the first 5 rows of the dataframe
titanic_data.head()

#number of rows and columns
titanic_data.shape

# getting some information about the data
titanic_data.info()

# to check the number of missing values in each column
titanic_data.isnull().sum()

"""Handling the missing values"""

#dropping the "Cabin" column from the dataframe
titanic_data = titanic_data.drop(columns='Cabin', axis=1)

#replacing the missing values in "Age" column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

#finding the mode value of "Fare" column
print(titanic_data['Fare'].mode())

#replacing the missing values in "Fare" with mode values
titanic_data['Fare'].fillna(titanic_data['Fare'].mode()[0], inplace=True)

# checking the number of missing values in each column
titanic_data.isnull().sum()

#getting some statistical measures about the data
titanic_data.describe()

#finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

"""Data Visualization"""

sns.set()

#making a count plot for "Survived" column
sns.countplot(x='Survived', data=titanic_data)

#making a count plot for "Sex" column
sns.countplot(x='Sex', data=titanic_data)

titanic_data['Sex'].value_counts()

#number of survivors Gender wise
sns.countplot(x='Sex', hue='Survived', data=titanic_data)

#making a count plot for "Pclass" column
sns.countplot(x='Pclass', data=titanic_data)

sns.countplot(x='Pclass', hue='Survived', data=titanic_data)

sns.countplot(x='Embarked', hue='Survived', data=titanic_data)

sns.countplot(x='Age', hue='Survived', data=titanic_data)

"""Encoding the Categorical Columns"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#converting categorical Columns
titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""Separating features & Target"""

X=titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'],axis=1)
Y=titanic_data['Survived']

print(X)

print(Y)

"""Splitting the data into training data & test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training"""

model = LogisticRegression()

#training the Logistsic Regression Model with training data
model.fit(X_train, Y_train)

"""Evaluating the Model

Accuracy Score
"""

#accuracy on Traning Data
X_train_prediction = model.predict(X_train)
print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print(training_data_accuracy)

#accuracy on Test Data
X_test_prediction = model.predict(X_test)
print(X_test_prediction)

testing_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print(testing_data_accuracy)